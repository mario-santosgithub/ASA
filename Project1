    #include <iostream>
    #include <vector>
    #include <string>

    // prototypes
    void problemOne(std::vector<std::vector<int>> numbers);
    int getMaxLength(std::vector<std::vector<int>> numbers);
    std::vector<std::vector<int>> initialize(int problem);
    int getSolutions(std::vector<std::vector<int>> numbers, int i, int j, int length, std::vector<int> aux);

    //global variables
    int size=0, maxlength, solutionsFound;

    // main function
    int main() {
        
        int problem;

        std::cin >> problem;
        if (problem == 1) {
            std::vector<std::vector<int>> numbers = initialize(problem);
            problemOne(numbers);
        }

        else if (problem == 2) {
            std::vector<std::vector<int>> numbers = initialize(problem);
        }
        return 0;
    }

    // reads the input and creates a vector with the numbers given
    std::vector<std::vector<int>> initialize(int problem) {

        std::string c, str="";
        int fNumber;
        std::vector<int> vector;
        std::vector<std::vector<int>> numbers;
        
        std::cin >> fNumber; // reads the first number
        size++;
        std::getline(std::cin, c); // " n1 n2 n3 n4"
        vector.push_back(fNumber);

        for(int i=1; i < c.length(); i++) { // while we dont read the rest of the numbers
        
            if (isdigit(c[i])) {
                str += c[i]; // if it's a number, add it
            }
            else {
                vector.push_back(stoi(str));
                size++;
                str = "";
            }
        }
        vector.push_back(stoi(str));
        size++;

        numbers.push_back(vector);
        return numbers;
    }


    int getMaxLength(std::vector<std::vector<int>> numbers) {

        int maxlength = 1, nSoluctions = 0;
        for (int i=0; i < size-1; i++) {
            if (numbers[0][i] < numbers[0][i+1]) {
                maxlength++;
            }
        }
        return maxlength;
    }


    int getSolutions(std::vector<std::vector<int>> numbers, int i, int j, int length, std::vector<int> aux) {
        if (length == maxlength ) {
            // caso j√° exista return 0
            for (int k=1; k <= solutionsFound; k++) {
                if (numbers[k] == aux) { return 0; }
            }

            // caso n exista, adicionar e incrementar solutionsFound
            numbers.push_back(aux);
            for(int k=0; k < maxlength; k++) {
            }
            solutionsFound++;
            return 1; 
        }

        if (i < 0 || j == size) { return 0; }

        if (numbers[0][i] < numbers[0][j]) {
            aux.push_back(numbers[0][j]);
            return getSolutions(numbers, j, j+1, length+1, aux) + getSolutions(numbers, i, j+1, length, aux);
        }
        else {
            return getSolutions(numbers, i, j+1, length, aux);
        }
    }


    void problemOne(std::vector<std::vector<int>> numbers) {  //   numeros = (length + 1) / 2

        std::vector<int> aux;

        maxlength = getMaxLength(numbers);

        int nSoluctions = 0, solutionsFound = 0; // solutionsFound is for aux
        //printf("size: %d\n", size);
        for (int i=0; i < size; i++) {
            int length = 1, b=1;
            aux.clear();   // clears the vector
            aux.push_back(numbers[0][i]);

            // para o caso de length ser igual a 1

            if (length == maxlength ) {
                for (int k=1; k <= solutionsFound; k++) {
                    if (numbers[k] == aux) {
                        b = 0;
                    }
                }
                if (b != 0) {
                    numbers.push_back(aux);
                    solutionsFound++;
                }
                nSoluctions = solutionsFound;
                
            }
            else {
                aux.push_back(numbers[0][i]);
                nSoluctions += getSolutions(numbers, i, i+1, length, aux);
            }
        }
        std::cout << maxlength << " " << nSoluctions << std::endl;
    }
