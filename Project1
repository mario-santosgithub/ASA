#include <iostream>
#include <vector>
#include <string>
#include <sstream>

// Prototypes
void problemOne(std::vector<int> numbers);
std::vector<int> initialize();
int getSolutions(std::vector<int> numbers, int i, int j, int length);
void problemTwo(std::vector<int> numbers1, std::vector<int> numbers2);


// Global variables
int size, maxlength=0, problem, solutions;
std::vector<int> vct1;

// Main function
int main() {

    std::cin >> problem; // reads the problem (first input line)

    if (problem == 1) {
        std::vector<int> numbers = initialize();
        size = numbers.size();
        problemOne(numbers);
    }

    return 0;

}

// fills the first line of the matrix with the input numbers
std::vector<int> initialize() {

    int f;
    std::vector<int> numbers;
    std::cin >> f;
    numbers.push_back(f);
    std::string str;
    std::stringstream ss;
    std::getline(std::cin, str);

    ss << str;
  
    /* Running loop till the end of the stream */
    std::string temp;
    int n;
    while (!ss.eof()) {
  
        ss >> temp;
  
        if (std::stringstream(temp) >> n)
            numbers.push_back(n);
  
        temp = "";
    }
    return numbers;    
}


void problemOne(std::vector<int> numbers) {

    int carry, length = 1;
    vct1.assign(size, 1);

    for (int i=0; i < size; i++) {
        carry += getSolutions(numbers, i, i+1, length);
    }
    
    std::cout << maxlength << " " << solutions << std::endl;
}

// find the solutions for the input according with the max length
int getSolutions(std::vector<int> numbers, int i, int j, int length) {

    if ((length > maxlength) && (j == size)) {
        maxlength = length;
        solutions = 1;
        return 1; 
    }
    if ((length == maxlength) && (j == size)) { solutions++; }

    // fazer testes para o output 6 4 com esta condição de length+1 <vct1[j] && j == size (maybe modificar o j==size)
    if (i < 0 || j == size || length < vct1[i]) { /*printf("return\n");*/ return 0; }

    if (numbers[i] < numbers[j] && length+1 >= vct1[j]) {
        vct1[j] = length+1;
        return getSolutions(numbers, j, j+1, length+1) + getSolutions(numbers, i, j+1, length);
    }
    else {
        return getSolutions(numbers, i, j+1, length);
    }
}
