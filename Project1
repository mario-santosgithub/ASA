#include <iostream>
#include <vector>
#include <string>

// prototypes
void problemOne(std::vector<std::vector<int>> numbers);
int getMaxLength(std::vector<std::vector<int>> numbers);
std::vector<std::vector<int>> initialize(int problem);
int getSolutions(std::vector<std::vector<int>> numbers, int i, int j, int length);
int getSolutionsAux(std::vector<std::vector<int>> numbers, int i, int j, int length);


//global variables
int size, maxlength;

// main function
int main() {
    
    int problem;

    std::cin >> problem;
    if (problem == 1) {
        std::vector<std::vector<int>> numbers = initialize(problem);
        problemOne(numbers);
    }

    else if (problem == 2) {
        std::vector<std::vector<int>> numbers = initialize(problem);

    }
    return 0;
}

// reads the input and creates a vector with the numbers given
std::vector<std::vector<int>> initialize(int problem) {

    std::string c, str;
    int fNumber;
    std::vector<std::vector<int>> vector;

    for(int p=0; p < problem; p++) {

        std::cin >> fNumber;

        std::getline(std::cin, c); // " n1 n2 n3 n4"
        size = (c.length()) / 2 + 1; // numbers to read (first already read)

        std::vector<std::vector<int>> numbers(problem, std::vector<int>(size, 0));
        numbers[p][0] = fNumber;

        int pos = 1, digits=0;

        int strPos=0;
        for(int i=1; i < c.length(); i++) { // while we dont read the rest of the numbers
        
            if (isdigit(c[i])) {
                str += c[i]; // if it's a number, add it
                std::cout << "str:" << str << std::endl;
            }
            else {
                numbers[p][pos] = stoi(str);
                pos++;
                str = "";
            }
        }
        numbers[p][pos] = stoi(str);
        vector = numbers;
    }

    return vector;
}


int getMaxLength(std::vector<std::vector<int>> numbers) {

    int maxlength = 1, nSoluctions = 0;
    for (int i=0; i < size-1; i++) {
        if (numbers[0][i] < numbers[0][i+1]) {
            maxlength++;
        }
    }
    return maxlength;
}


int getSolutions(std::vector<std::vector<int>> numbers, int i, int j, int length) {
    printf("length: %d\n", length);
    printf("i: %d, j: %d\n", i, j);
    if (length == maxlength ) { return 1; } // save
    if (i < 0 || j == size) { return 0; }
    printf("n1: %d, n2: %d\n", numbers[0][i], numbers[0][j]);
    int n;
    std::cin >> n;
    if (numbers[0][i] < numbers[0][j]) {
        printf("CHAMOU\n");
        while (i < j) { i++; }
        return getSolutions(numbers, i, j+1, length+1);
    }
    else {
        return getSolutions(numbers, i, j+1, length) + getSolutionsAux(numbers, i-1, j, --length);
    }
}

int getSolutionsAux(std::vector<std::vector<int>> numbers, int i, int j, int length) {

    printf("aux - n1: %d, n2: %d\n", numbers[0][i], numbers[0][j]);

    if (i < 0) {
        return 0;
    }
    if(numbers[0][i] < numbers[0][j]) { // fix the index
        while (i < j) {
            i++;
        }
        return getSolutions(numbers, i, j+1, ++length);
    }
    return 0;
}

void problemOne(std::vector<std::vector<int>> numbers) {  //   numeros = (length + 1) / 2

    maxlength = getMaxLength(numbers);
    printf("maxlength = %d\n", maxlength);


    int nSoluctions = 0;
    for(int i=0; i < size; i++) {
        int j = i+1;
        nSoluctions += getSolutions(numbers, i, j, 1);
    }
    printf("Soluctions: %d\n", nSoluctions);

    std::cout << maxlength << " " << nSoluctions << std::endl;
}
