#include <iostream>
#include <vector>
#include <string>

// Prototypes
void problemOne(std::vector<int> numbers);
std::vector<int> initialize();
int getSolutions(std::vector<int> numbers, int i, int j, int length);
void problemTwo(std::vector<int> numbers1, std::vector<int> numbers2);


// Global variables
int size, maxlength=0, problem, solutions;
std::vector<std::vector<int>> res;

// Main function
int main() {

    std::cin >> problem; // reads the problem (first input line)

    if (problem == 1) {
        std::vector<int> numbers = initialize();
        size = numbers.size();
        problemOne(numbers);
    }

    return 0;

}

// fills the first line of the matrix with the input numbers
std::vector<int> initialize() {

    std::string c, str = "";
    int fNumber; // first number needs to be read to use getline()
    std::vector<int> numbers;

    std::cin >> fNumber;
    std::getline(std::cin, c); // reads the rest of the input c = " n2 n3 nk"
    numbers.push_back(fNumber);

    if (c.size() == 0) {
        return numbers;
        }

    long strSize = c.size();

    for(long i=1; i < strSize; i++) {
        // if it's not a space (is a number) add it 
        if(isspace(c[i]) == 0) { str += c[i]; } 

        else { 
            numbers.push_back(stoi(str));
            str = "";
        }
    }
    numbers.push_back(stoi(str));
    return numbers;    
}


void problemOne(std::vector<int> numbers) {

    int carry, length = 1;
    
    carry += getSolutions(numbers, 0, 1, length);
    
    std::cout << maxlength << " " << solutions << std::endl;
}

// find the solutions for the input according with the max length
int getSolutions(std::vector<int> numbers, int i, int j, int length) {

    //printf("n1: %d, n2: %d, length: %d\n", numbers[i], numbers[j], length);
    if ((length > maxlength) && (j == size)) {
        maxlength = length;
        solutions = 1;
        return 1; 
    }
    if (length == maxlength) { solutions++; }

    if (i < 0 || j == size) { return 0; }

    if (numbers[i] < numbers[j]) {
        return getSolutions(numbers, j, j+1, length+1);
    }
    else {
        return getSolutions(numbers, i, j+1, length) + getSolutions(numbers, i-1, j, length-1);
    }
}
