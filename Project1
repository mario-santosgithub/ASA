#include <iostream>
#include <vector>
#include <string>

// Prototypes
void problemOne(std::vector<std::vector<int>> numbers);
void getMaxLength(std::vector<std::vector<int>> numbers);
std::vector<std::vector<int>> initialize();
int getSolutions(std::vector<std::vector<int>> numbers, int i, int j, int length, std::vector<int> aux);
std::vector<int> addElement(std::vector<int> aux, int v);
void problemTwo(std::vector<std::vector<int>> numbers1, std::vector<std::vector<int>> numbers2);

// Global variables
int size=0, maxlength=0, problem;
std::vector<std::vector<int>> res;

// Main function
int main() {

    std::cin >> problem; // reads the problem (first input line)

    if (problem == 1) {
        std::vector<std::vector<int>> numbers = initialize();
        getMaxLength(numbers);
        problemOne(numbers);
    }

    if (problem == 2) {
        std::vector<std::vector<int>> numbers1 = initialize();
        std::vector<std::vector<int>> numbers2 = initialize();
        problemTwo(numbers1, numbers2);
    }

    return 0;

}

// fills the first line of the matrix with the input numbers
std::vector<std::vector<int>> initialize() {

    std::string c, str = "";
    int fNumber; // first number needs to be read to use getline()
    std::vector<int> aux; // an auxiliar vector
    std::vector<std::vector<int>> numbers;

    std::cin >> fNumber;
    std::getline(std::cin, c); // reads the rest of the input c = " n2 n3 nk"
    aux.push_back(fNumber);

    long strSize = c.size();

    for(long i=1; i < strSize; i++) {
        // if it's not a space (is a number) add it 
        if(isspace(c[i]) == 0) { str += c[i]; } 

        else { 
            aux.push_back(stoi(str));
            str = "";
        }
    }
    aux.push_back(stoi(str));
    numbers.push_back(aux); // insert the numbers on the matrix
    size = aux.size();
    return numbers;    
}

// gets the maxlength of the input
void getMaxLength(std::vector<std::vector<int>> numbers) { // aux = {}

    std::vector<int> aux;
    std::vector<int> maxlengthvector;

    for (int i=0; i < size; i++) {
        aux.clear();
        aux.push_back(numbers[0][i]);
        int k = i, j=i+1;
        while (j != size) {
            if(numbers[0][k] < numbers[0][j]) {
                aux.push_back(numbers[0][k]);
                k = j;
                j = j+1;
            }
            else { j++; }               
        }
        if (aux.size() > maxlengthvector.size()) { maxlengthvector = aux; }
    }

    maxlength = maxlengthvector.size();
}


void problemOne(std::vector<std::vector<int>> numbers) {  //   numeros = (length + 1) / 2

    std::vector<int> aux;

    int nSoluctions = 0;

    for (int i=0; i < size; i++) {
        int length = 1, b=1; // b represents a boolean b=0 (FALSE) b=1 (TRUE)
        aux.clear();   // clears the vector

        if (length == maxlength) { // if the max length is 1
            
            aux.push_back(numbers[0][i]);
            
            for(std::vector<int> k: res) {
                if (k == aux) { b = 0; }
            }

            if(b == 1) { res.push_back(aux); nSoluctions++; }
        }
        else {
            aux.push_back(numbers[0][i]);
            nSoluctions += getSolutions(numbers, i, i+1, length, aux);
            for(std::vector<int> m: res) {
                numbers.push_back(m);
            }
        }
    }
    printf("teste1\n");
    for(std::vector<int> s1: numbers) {
        for(int i: s1) { printf("%d ", i);} printf("\n");
    }

    if (problem == 1) { std::cout << maxlength << " " << nSoluctions << std::endl; }
    res.clear();
}

// find the solutions for the input according with the max length
int getSolutions(std::vector<std::vector<int>> numbers, int i, int j, int length, std::vector<int> aux) {

    if ((int)aux.size() == maxlength) {

        for (std::vector<int> m: res) {
            if (m == aux) { return 0; } // if the subsequence exists, return 0
        }

        res.push_back(aux);
        return 1; 
    }

    if (i < 0 || j == size) { return 0; }

    if (numbers[0][i] < numbers[0][j]) {
        return getSolutions(numbers, j, j+1, length+1, addElement(aux, numbers[0][j])) + getSolutions(numbers, i, j+1, length, aux);
    }
    else {
        return getSolutions(numbers, i, j+1, length, aux);
    }
}

// function used in the recursion above to add elements in aux
std::vector<int> addElement(std::vector<int> aux, int v) {
    aux.push_back(v);
    return aux;
}


// funtion to solve problem 2
void problemTwo(std::vector<std::vector<int>> numbers1, std::vector<std::vector<int>> numbers2) {
    
    getMaxLength(numbers1);
    problemOne(numbers1);
    int length1 = maxlength;
    printf("teste 2\n");
    printf("size n1: %ld", numbers1.size());
    for(std::vector<int> s1: numbers1) {
        for(int i: s1) { printf("%d ", i);} printf("\n");
    }

    getMaxLength(numbers2);
    problemOne(numbers2);
    int length2 = maxlength;

    if(length1 > length2) { maxlength = length1; }
    else { maxlength = length2; }

    while (maxlength > 0) {
        printf("ml: %d\n", maxlength);
        
        problemOne(numbers1);
        problemOne(numbers2);

        for (int i=0; i < numbers1.size(); i++) {
            for(int j=0; j < numbers2.size(); j++) {
                if (numbers1[i] == numbers2[j]) {
                    std::cout << maxlength << std::endl;
                    return;
                }
            } 
        }
    maxlength--;
    }
}
