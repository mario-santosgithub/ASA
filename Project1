#include <iostream>
#include <vector>
#include <string>

// prototypes
void problemOne(std::vector<std::vector<int>> numbers);
int getMaxLength(std::vector<std::vector<int>> numbers, std::vector<int> aux);
std::vector<std::vector<int>> initialize(int problem);
int getSolutions(std::vector<std::vector<int>> numbers, int i, int j, int length, std::vector<int> aux);
std::vector<int> addElement(std::vector<int> aux, int v);

//global variables
int size=0, maxlength, solutionsFound;
std::vector<std::vector<int>> res;

// main function
int main() {
    
    int problem;

    std::cin >> problem;
    if (problem == 1) {
        std::vector<std::vector<int>> numbers = initialize(problem);
        problemOne(numbers);
    }

    else if (problem == 2) {
        std::vector<std::vector<int>> numbers = initialize(problem);
    }
    return 0;
}

// reads the input and creates a vector with the numbers given
std::vector<std::vector<int>> initialize(int problem) {

    std::string c, str="";
    int fNumber;
    std::vector<int> vector;
    std::vector<std::vector<int>> numbers;
    
    std::cin >> fNumber; // reads the first number
    size++;
    std::getline(std::cin, c); // " n1 n2 n3 n4"
    vector.push_back(fNumber);

    long strSize = c.size();

    for(long i=1; i < strSize; i++) { // while we dont read the rest of the numbers
    
        if (isdigit(c[i])) {
            str += c[i]; // if it's a number, add it
        }
        else {
            vector.push_back(stoi(str));
            size++;
            str = "";
        }
    }
    vector.push_back(stoi(str));
    size++;

    numbers.push_back(vector);
    return numbers;
}


std::vector<int> addElement(std::vector<int> aux, int v) {
    aux.push_back(v);
    return aux;
}


int getMaxLength(std::vector<std::vector<int>> numbers, std::vector<int> aux) { // aux = {}

    std::vector<int> maxlength;

    aux.clear();

    for (int i=0; i < size; i++) {
        aux.clear();
        aux.push_back(numbers[0][i]);
        int k = i, j=i+1;
        while (j != size) {
            if(numbers[0][k] < numbers[0][j]) {
                aux.push_back(numbers[0][k]);
                k = j;
                j = j+1;
            }
            else {
                j++;
            }               
        }
        if (aux.size() > maxlength.size()) { maxlength = aux; }
    }
    return maxlength.size();
}


int getSolutions(std::vector<std::vector<int>> numbers, int i, int j, int length, std::vector<int> aux) {

    if (aux.size() == maxlength ) {
        // caso ja exista return 0
        for (std::vector<int> m: res) {
            if (m == aux) { return 0; }
        }

        // caso n exista, adicionar e incrementar solutionsFound
        res.push_back(aux);
        for(int k=0; k < maxlength; k++) {
        }
        solutionsFound++;
        return 1; 
    }

    if (i < 0 || j == size) { return 0; }

    if (numbers[0][i] < numbers[0][j]) {
        return getSolutions(numbers, j, j+1, length+1, addElement(aux, numbers[0][j])) + getSolutions(numbers, i, j+1, length, aux);
    }
    else {
        return getSolutions(numbers, i, j+1, length, aux);
    }
}


void problemOne(std::vector<std::vector<int>> numbers) {  //   numeros = (length + 1) / 2

    std::vector<int> aux;
    maxlength = getMaxLength(numbers, aux);

    int nSoluctions = 0, solutionsFound = 0; // solutionsFound is for aux
    //printf("size: %d\n", size);
    for (int i=0; i < size; i++) {
        int length = 1, b=1;
        aux.clear();   // clears the vector

        // para o caso de length ser igual a 1

        if (length == maxlength ) {
            for (int k=1; k <= solutionsFound; k++) {
                if (numbers[k] == aux) {
                    b = 0;
                }
            }
            if (b != 0) {
                numbers.push_back(aux);
                solutionsFound++;
            }
            nSoluctions = solutionsFound;
                
        }
        else {
            aux.push_back(numbers[0][i]);
            nSoluctions += getSolutions(numbers, i, i+1, length, aux);
            for(std::vector<int> m: res) {
                numbers.push_back(m);
            }
        }
    }
    std::cout << maxlength << " " << nSoluctions << std::endl;
    res.clear();
}
